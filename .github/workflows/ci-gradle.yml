name: Gradle CI

on:
  workflow_dispatch:
    inputs:
    reason:
      description: 'What are you doing?'
      required: true
      default: 'Manual Gradle CI run'

  push:
    branches:
      - main
  
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Run tests
        run: ./gradlew clean test


      - name: Upload coverage reports for Scan
        uses: actions/upload-artifact@v4
        with:
          name: coverage_reports
          path: |
            build/reports/jacoco/test/jacocoTestReport.xml
          
      - name: Verify Reports and Coverage
        run: |
          ls -la
          ls -la build/
          ls -lh build/reports/jacoco/test/jacocoTestReport.xml
          ls -lh build/jacoco/test.exec         


  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build project
        run: ./gradlew build


  scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew


      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
            name: coverage_reports
            path: .

      # - name: Extract downloaded zip
      #   run: unzip -o coverage_reports.zip -d .

      - name: Verify report download
        run: |
          echo "PWD: $(pwd)"          
          mkdir -p build/reports/jacoco/test/
          echo "Build Dir before Move:"
          ls build/reports/jacoco/test/
          mv jacocoTestReport.xml build/reports/jacoco/test/
          echo "Build Dir after Move:"
          ls build/reports/jacoco/tes/
        


      - name: SonarQube Scan
        run: |
          ./gradlew sonarqube \
          -Dsonar.host.url="${{ secrets.SONAR_CLOUD_URL }}" \
          -Dsonar.login="${{ secrets.SONAR_TOKEN }}" \
          -Dsonar.projectKey="${{ secrets.SONAR_PROJECT_KEY }}" \
          -Dsonar.organization="${{ secrets.SONAR_ORGANIZATION }}"
        # -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml


      - name: Verify Dir for Sonar after Scan
        run: |
          echo "PWD: $(pwd)"
          echo "Checking build dir:"
          ls -lh build/         
          echo "Checking build/classes/java folder:"
          ls -lh build/classes/java
          echo "Checking build/classes/java/main classes:"
          ls -lh build/classes/java/main/org/springframework/samples/petclinic/
          echo "Checking build/classes/java/test classes:"
          ls -lh build/classes/java/test/org/springframework/samples/petclinic/
          

      # SonarQube Cloud Scan Stage --- Stand Alone CLI Scanner not recommended.
      # - name: SonarQube Scan
      #   uses: SonarSource/sonarcloud-github-action@v2
      #   with:
      #     projectBaseDir: .
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
      #     SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
